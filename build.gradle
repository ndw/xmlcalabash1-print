buildscript {
  repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
  }

  dependencies {
    classpath fileTree(dir: 'lib').include("*.jar")
    classpath group: 'net.sf.saxon', name: 'Saxon-HE', version: saxonVersion
    classpath group: 'biz.aQute.bnd', name: 'biz.aQute.bnd.gradle', version: '4.2.0'
  }
}

plugins {
  id "java"
  id "maven"
  id "signing"
}

apply plugin: 'biz.aQute.bnd.builder'

repositories {
  mavenCentral()
  maven { url "http://maven.restlet.org" }
  maven { url "http://developer.marklogic.com/maven2" }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

configurations {
  localLibs

  copydep {
    extendsFrom runtime
  }
  copydep.exclude module: 'xmlcalabash'
  copydep.exclude module: 'nwalsh-annotations'
}

dependencies {
  localLibs fileTree(dir: 'lib').include("*.jar")
  compile (
    [group: 'com.nwalsh', name: 'nwalsh-annotations', version: '1.0.0'],
    [group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.27-99'],
    [group: 'org.apache.xmlgraphics', name: 'fop', version: '2.3'],
    [group: 'xalan', name: 'xalan', version: '2.7.2'],
    [group: 'org.apache.avalon.framework', name: 'avalon-framework-api', version: '4.3.1'],
    [group: 'org.apache.avalon.framework', name: 'avalon-framework-impl', version: '4.3.1']
  )
}

// Variables
project.ext.saxonRelease = saxonVersion.substring(0,5)
project.ext.saxonBranch  = saxonVersion.substring(0,3).replaceAll("\\.", "")
project.ext.releaseVersion = version
project.ext.distVersion = version + snapshot
version = project.ext.distVersion // - gets turned into . in some contexts

compileJava {
  classpath += configurations.localLibs
}

javadoc {
  classpath += configurations.localLibs
}

task copyLib(type: Copy) {
  FileCollection lib = configurations.copydep
  String path = ""
  lib.each {
    File file -> path += " lib/" + file.name
  }
  project.ext.runtimeClasspath = path.trim()

  from lib
  into { "build/dist/lib" }
}

task copyCatalog(type: Copy) {
  from 'resources/catalog.xml'
  into 'build'
  filter { String line -> line.replaceAll('VERSION', distVersion) }
}

jar {
  from { ['build/catalog.xml', 'resources/library.xpl'] }
  bnd ('Bundle-Vendor': 'Norman Walsh',
       'Bundle-Description': 'XML Calabash paged media support.',
       'Bundle-Name': 'xmlcalabash1',
       'Bundle-SymbolicName': 'com.xmlcalabash',
       'Class-Path': project.ext.runtimeClasspath + " lib",
       'Implementation-Title': 'XML Calabash paged media support',
       'Implementation-Version': distVersion
  )
}
jar.dependsOn copyCatalog

task copyNotices(type: Copy) {
  from 'resources/notices'
  into 'build/dist/docs/notices'
}
jar.dependsOn copyNotices

task copyStuff(type: Copy) {
  from 'README.md'
  from 'LICENSE.md'
  into 'build/dist'
}

task copyToDist(dependsOn: [copyLib,copyStuff]) {
  // nop
}
jar.dependsOn copyToDist

task javadocJar(type: Jar, dependsOn: javadoc) {
    from tasks.javadoc.destinationDir
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task copyJar(dependsOn: jar, type: Copy) {
  from "build/libs/xmlcalabash1-print-" + distVersion + ".jar"
  into "build/dist"
}

task copyJavaDoc(dependsOn: javadoc, type: Copy) {
  from "build/docs"
  into "build/dist/docs"
}

task testStep(type: JavaExec) {
  classpath = configurations.copydep + configurations.runtime + sourceSets.main.output

  main = 'com.xmlcalabash.drivers.Main'
  maxHeapSize = "1024m"
  args('-D', '-a', 'src/test/resources/test-pipeline.xpl')
}

task makeDist(dependsOn: [ build, copyJar, copyLib ]) {
  doLast {
    println "Created distribution in build/dist"
  }
}

task zipDist(dependsOn: makeDist, type: Zip) {
  from('build/dist')
  into 'xmlcalabash1-print-' + distVersion
  archiveName 'xmlcalabash1-print-' + distVersion + ".zip"
}

task dist(dependsOn: zipDist) {
  doLast {
    // nop
  }
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

signing {
  required { gradle.taskGraph.hasTask("uploadArchives") }
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment ->
        signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }

      pom.project {
        name 'XML Calabash print support'
        packaging 'jar'
        description 'XML Calabash support for printing with FO and CSS'
        url 'https://github.com/ndw/xmlcalabash1-print'

        scm {
          url 'scm:git@github.com:ndw/xmlcalabash1-print.git'
          connection 'scm:git@github.com:ndw/xmlcalabash1-print.git'
          developerConnection 'scm:git@github.com:ndw/xmlcalabash1-print.git'
        }

        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id 'ndw'
            name 'Norman Walsh'
          }
        }
      }
    }
  }
}
